<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShiYC的博客</title>
  
  
  <link href="https://faketerrible.github.io/atom.xml" rel="self"/>
  
  <link href="https://faketerrible.github.io/"/>
  <updated>2021-05-23T08:37:41.124Z</updated>
  <id>https://faketerrible.github.io/</id>
  
  <author>
    <name>ShiYC</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack学习一</title>
    <link href="https://faketerrible.github.io/2021/05/23/webpack%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>https://faketerrible.github.io/2021/05/23/webpack%E5%AD%A6%E4%B9%A0%E4%B8%80/</id>
    <published>2021-05-23T06:06:38.000Z</published>
    <updated>2021-05-23T08:37:41.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>本质上，<code>webpack</code> 是一个用于现代 <code>JavaScript</code> 应用程序的 静态模块打包工具。当 <code>webpack</code> 处理应用程序时，它会在内部构建一个 依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 <code>bundle</code>。</p><blockquote><p> 注意：从 v4.0.0 开始，webpack 可以不用再引入一个配置文件来打包项目，然而，它仍然有着 高度可配置性，可以很好满足你的需求。</p></blockquote><h3 id="我们为什么要学习webpack"><a href="#我们为什么要学习webpack" class="headerlink" title="我们为什么要学习webpack"></a>我们为什么要学习<a href="https://webpack.docschina.org/concepts/"><code>webpack</code></a></h3><p><em><strong><code>webpack</code>的主要优势</strong></em></p><p>① 模块化开发（import，require）<br>② 预处理（Less，Sass，ES6，TypeScript……）<br>③ 主流框架脚手架支持（Vue，React，Angular）<br>④ 庞大的社区（资源丰富，降低学习成本）</p><span id="more"></span><h3 id="在开始前我们需要先理解一些核心概念："><a href="#在开始前我们需要先理解一些核心概念：" class="headerlink" title="在开始前我们需要先理解一些核心概念："></a>在开始前我们需要先理解一些<strong>核心概念</strong>：</h3><ul><li><strong>入口(entry)</strong></li></ul><p>入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p><p><strong>webpack.config.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>输出(output)</strong></li></ul><p>output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。</p><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面导入的 path 模块是什么，它是一个 <code>Node.js</code> 核心模块，用于操作文件路径。</p><ul><li><strong>loader</strong></li></ul><p>webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。</p><blockquote><p>注意，loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><p><em><strong>在更高层面，在 webpack 的配置中，loader 有两个属性</strong></em>：</p><blockquote><ol><li>test 属性，识别出哪些文件会被转换。</li><li>use 属性，定义出在进行转换时，应该使用哪个 loader。</li></ol></blockquote><p><strong>webpack.config.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&#x27;raw-loader&#x27;</span>&#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上配置中，对一个单独的 module 对象定义了 rules 属性，里面包含两个必须属性：test 和 use。这告诉 webpack 编译器(compiler) 如下信息：</p><blockquote><p>“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先 use(使用) raw-loader 转换一下。”</p></blockquote><blockquote><p>重要的是要记住，在 webpack 配置中定义 rules 时，要定义在 <code>module.rules</code> 而不是 rules 中。为了使你便于理解，如果没有按照正确方式去做，webpack 会给出警告。</p></blockquote><blockquote><p>请记住，使用正则表达式匹配文件时，你不要为它添加引号。也就是说，<code>/\.txt$/</code> 与 <code>&#39;/\.txt$/&#39;</code> 或 <code>&quot;/\.txt$/&quot;</code> 不一样。前者指示 webpack 匹配任何以 <code>.txt</code> 结尾的文件，后者指示 webpack 匹配具有绝对路径 <code>&#39;.txt&#39;</code> 的单个文件; 这可能不符合你的意图。</p></blockquote><ul><li>插件(plugin)</li></ul><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p><p>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建一个插件实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, use: <span class="string">&#x27;raw-loader&#x27;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span> &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>html-webpack-plugin</code> 为应用程序生成一个 HTML 文件，并自动注入所有生成的 bundle。</p><ul><li>模式(mode)</li></ul><p>通过选择 development, production 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>浏览器兼容性(browser compatibility)</li></ul><p>webpack 支持所有符合 ES5 标准 的浏览器（不支持 IE8 及以下版本）。webpack 的 import() 和 require.ensure() 需要 Promise。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 提前加载 polyfill。</p><ul><li>环境(environment)</li></ul><p>webpack 5 运行于 Node.js v10.13.0+ 的版本.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;本质上，&lt;code&gt;webpack&lt;/code&gt; 是一个用于现代 &lt;code&gt;JavaScript&lt;/code&gt; 应用程序的 静态模块打包工具。当 &lt;code&gt;webpack&lt;/code&gt; 处理应用程序时，它会在内部构建一个 依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 &lt;code&gt;bundle&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 注意：从 v4.0.0 开始，webpack 可以不用再引入一个配置文件来打包项目，然而，它仍然有着 高度可配置性，可以很好满足你的需求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;我们为什么要学习webpack&quot;&gt;&lt;a href=&quot;#我们为什么要学习webpack&quot; class=&quot;headerlink&quot; title=&quot;我们为什么要学习webpack&quot;&gt;&lt;/a&gt;我们为什么要学习&lt;a href=&quot;https://webpack.docschina.org/concepts/&quot;&gt;&lt;code&gt;webpack&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;webpack&lt;/code&gt;的主要优势&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;① 模块化开发（import，require）&lt;br&gt;② 预处理（Less，Sass，ES6，TypeScript……）&lt;br&gt;③ 主流框架脚手架支持（Vue，React，Angular）&lt;br&gt;④ 庞大的社区（资源丰富，降低学习成本）&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://faketerrible.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="webpack" scheme="https://faketerrible.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>搞定分类和标签</title>
    <link href="https://faketerrible.github.io/2021/05/23/%E6%90%9E%E5%AE%9A%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
    <id>https://faketerrible.github.io/2021/05/23/%E6%90%9E%E5%AE%9A%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</id>
    <published>2021-05-23T04:10:49.000Z</published>
    <updated>2021-05-23T04:24:28.933Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始前的回顾"><a href="#开始前的回顾" class="headerlink" title="开始前的回顾"></a>开始前的回顾</h3><p>作为菜鸟，开始整理自己博客，就碰到了许多问题。一个礼拜以来，虽然一直在记录自己的历程，但是结果却不尽人意。我一开始并不觉得没有分类和标签有什么的，但是，随着自己文章的增多，一直这样是不好的。无奈，开始自己的创建分类和标签之旅。</p><span id="more"></span><h3 id="创建分类"><a href="#创建分类" class="headerlink" title="创建分类"></a>创建分类</h3><ul><li><strong>创建分类页面</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><ul><li><strong>index.md内容</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2021-05-23 11:42:27</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">layout: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><ul><li><strong>创建标签页面</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><ul><li><strong>index.md内容</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2021-05-23 11:54:39</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">layout: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>我开始使用的时候，是缺少<code>layout</code>这个选项的。于是，我的分类和标签页面没有任何内容。</p><p>在加上<code>layout</code>之后，一切解决，完美的呈现了我的文章的分类和标签。</p><h3 id="回顾和反思"><a href="#回顾和反思" class="headerlink" title="回顾和反思"></a>回顾和反思</h3><p>我接触<code>hexo</code>其实很久了，直到最近才开始真的使用，配置了网站的icon等。文章写起来也比一起顺手的多，毕竟接触md文档时间也不短了。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;开始前的回顾&quot;&gt;&lt;a href=&quot;#开始前的回顾&quot; class=&quot;headerlink&quot; title=&quot;开始前的回顾&quot;&gt;&lt;/a&gt;开始前的回顾&lt;/h3&gt;&lt;p&gt;作为菜鸟，开始整理自己博客，就碰到了许多问题。一个礼拜以来，虽然一直在记录自己的历程，但是结果却不尽人意。我一开始并不觉得没有分类和标签有什么的，但是，随着自己文章的增多，一直这样是不好的。无奈，开始自己的创建分类和标签之旅。&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="https://faketerrible.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://faketerrible.github.io/tags/hexo/"/>
    
    <category term="分类" scheme="https://faketerrible.github.io/tags/%E5%88%86%E7%B1%BB/"/>
    
    <category term="标签" scheme="https://faketerrible.github.io/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>猿辅导面试查漏补缺</title>
    <link href="https://faketerrible.github.io/2021/05/21/%E7%8C%BF%E8%BE%85%E5%AF%BC%E9%9D%A2%E8%AF%95%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>https://faketerrible.github.io/2021/05/21/%E7%8C%BF%E8%BE%85%E5%AF%BC%E9%9D%A2%E8%AF%95%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</id>
    <published>2021-05-21T12:39:14.000Z</published>
    <updated>2021-05-23T04:01:18.482Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本次回顾"><a href="#本次回顾" class="headerlink" title="本次回顾"></a>本次回顾</h3><p>一开始的自我介绍就相当于水水，面试官看样子也不是能做决定的人。本来以为会是很难的面试题，都是那种普普通通，可能还有一些我没有记住的面试题答案，但终究还是水过去了。没有录音，有些可惜。</p><span id="more"></span><h3 id="记录答得不好的题目"><a href="#记录答得不好的题目" class="headerlink" title="记录答得不好的题目"></a>记录答得不好的题目</h3><ul><li><code>setTimeout/setInterval</code></li></ul><p><code>setTimeout()</code> 是属于 window 的方法，该方法用于在指定的毫秒数后调用函数或计算表达式。</p><p>语法格式可以是以下两种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(要执行的代码，等待的毫秒数)</span><br><span class="line"><span class="built_in">setTimeout</span>(JavaScript 函数，等待的毫秒数)</span><br></pre></td></tr></table></figure><p>既然有开始计数，那么相对应的就要有停止计数，停止计时使用的函数为 <code>clearTimeout()</code>。</p><p><code>setTimeout()</code> 方法可以使到浏览器不断执行一段代码或一个函数 当一个 <code>setTimeout( ) </code>开始了循环的工作, 我们要使它停下来, 可使用 <code>clearTimeout( ) </code>这方法。</p><p><code>clearTimeout()</code> 语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearTimeout</span>(timeoutID)</span><br></pre></td></tr></table></figure><p><code>setInterval()</code> 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。</p><p><code>setInterval()</code> 方法会不停地调用函数，直到 <code>clearInterval()</code> 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 <code>clearInterval()</code> 方法的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(code,milliseconds);</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>,<span class="title">milliseconds</span>,<span class="title">param1</span>,<span class="title">param2</span>,...)</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>code/function</td><td>必需。要调用一个代码串，也可以是一个函数。</td></tr><tr><td>milliseconds</td><td>必须。周期性执行或调用 code/function 之间的时间间隔，以毫秒计。</td></tr><tr><td>param1, param2, .</td><td>可选。 传给执行函数的其他参数（IE9 及其更早版本不支持该参数）。</td></tr></tbody></table><ul><li>栈溢出</li></ul><p>程序的有效内存还可以再分为多个区域，每个区域都有不同的作用，比如代码区、全局数据区、堆区、栈区、动态链接库区等。</p><p>栈就是这些内存分区中的一个。</p><p>那么，栈是用来做什么的呢？</p><p>整个内存都是用来存储数据的，栈也不例外。栈用来存储程序的局部数据。</p><p>对于C/C++来说，局部数据是指在函数内部定义的数据，例如在函数内部定义的变量、指针、参数、结构体、数组、对象、引用等，它们都要保存到栈中。</p><p>与之相对应的，在函数外部定义的变量、指针、对象、结构体、数组等都是全局数据，它们要保存到全局数据区。</p><p>而 malloc( )、new、new[ ] 是在程序运行的过程中动态地分配内存，这些内存都位于堆区。</p><p>栈为什么会溢出</p><p>对每个程序来说，栈能使用的内存是有限的，一般是 1M~8M，这在编译时就已经决定了，程序运行期间不能再改变。如果程序使用的栈内存超出最大值，就会发生栈溢出（Stack Overflow）错误，程序就崩溃了。</p><p>这个就像木桶里的水，木桶的容量有限，水满了自然会溢出来。</p><ul><li><code>react</code>相关，<code>hook</code></li></ul><p><code>Hook</code> 是 <code>React 16.8</code> 的新增特性。它可以让你在不编写 <code>class</code> 的情况下使用 <code>state</code> 以及其他的 <code>React</code> 特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明一个新的叫做 “count” 的 state 变量</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="xml">        Click me</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>React 16.8.0</code> 是第一个支持 <code>Hook</code> 的版本。</p><p><code>Hook</code> 是向下兼容的。</p><p><a href="https://zh-hans.reactjs.org/docs/hooks-overview.html">Hook文档</a></p><ul><li>事件循环</li></ul><p>虽然不是第一次听说时间循环，以为自己也理解了，但是真问起来还是一头雾水。</p><p><strong>事件循环</strong></p><p>1.JavaScript是单线程，非阻塞的</p><p><strong>单线程</strong>：</p><p>JavaScript的主要用途是与用户互动，以及操作DOM。如果它是多线程的会有很多复杂的问题要处理，比如有两个线程同时操作DOM，一个线程删除了当前的DOM节点，一个线程是要操作当前的DOM阶段，最后以哪个线程的操作为准？为了避免这种，所以JS是单线程的。即使H5提出了web worker标准，它有很多限制，受主线程控制，是主线程的子线程。</p><p><strong>非阻塞</strong>：通过 event loop 实现。</p><p>2.浏览器的事件循环</p><blockquote><ul><li>执行栈和事件队列</li><li>宏任务和微任务</li></ul></blockquote><p>3.node环境下的事件循环</p><blockquote><ul><li>和浏览器环境有何不同</li><li>事件循环模型</li><li>宏任务和微任务</li></ul></blockquote><p>4.经典题目分析</p><p>详细情况可访问：<a href="https://segmentfault.com/a/1190000022805523">JavaScript中的Event Loop（事件循环）机制</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;本次回顾&quot;&gt;&lt;a href=&quot;#本次回顾&quot; class=&quot;headerlink&quot; title=&quot;本次回顾&quot;&gt;&lt;/a&gt;本次回顾&lt;/h3&gt;&lt;p&gt;一开始的自我介绍就相当于水水，面试官看样子也不是能做决定的人。本来以为会是很难的面试题，都是那种普普通通，可能还有一些我没有记住的面试题答案，但终究还是水过去了。没有录音，有些可惜。&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="https://faketerrible.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="https://faketerrible.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="javascript" scheme="https://faketerrible.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>记录错题</title>
    <link href="https://faketerrible.github.io/2021/05/20/%E8%AE%B0%E5%BD%95%E9%94%99%E9%A2%98/"/>
    <id>https://faketerrible.github.io/2021/05/20/%E8%AE%B0%E5%BD%95%E9%94%99%E9%A2%98/</id>
    <published>2021-05-20T14:02:22.000Z</published>
    <updated>2021-05-23T04:00:01.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="偶然的机会碰到了一个小程序"><a href="#偶然的机会碰到了一个小程序" class="headerlink" title="偶然的机会碰到了一个小程序"></a>偶然的机会碰到了一个小程序</h3><p>今天在网上的github浏览内容，突然碰到了一位大神的博客，地址见下面：</p><p><a href="https://muyiy.cn/blog/">木易杨的博客</a></p><span id="more"></span><h3 id="闲来无事打开了小程序"><a href="#闲来无事打开了小程序" class="headerlink" title="闲来无事打开了小程序"></a>闲来无事打开了小程序</h3><p>打开小程序后，我惊喜的发现里面内容多多。不由得想要试试水，没想到真的感受到了自己薄弱的基础。十道题错了四个，还有一些是打开console后敲了一遍才知道答案的。</p><h3 id="记录错题"><a href="#记录错题" class="headerlink" title="记录错题"></a>记录错题</h3><ul><li>将<code>hasName</code>设置为<code>true</code>的方法，前提是不能将<code>true</code>作为参数传递。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hasName=<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>A !!name<br>B name<br>C new Boolean(name)<br>D name.length</p><p><strong>答案：A</strong></p><p>我选了错误答案C，<code>new Boolean(true)</code>返回一个对象包装器，而不是布尔值本身。<br>使用逻辑非运算符<code>!</code>，将返回一个布尔值。如果<code>name</code>是真实的，那么<code>!name</code>为<code>false</code>，<code>!!name</code>返回<code>true</code>。</p><ul><li>当我们这样做时会发生什么</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Woof!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bark.animal = <span class="string">&#x27;dog&#x27;</span>;</span><br></pre></td></tr></table></figure><p>A Nothing,this is totally fine!<br>B SyntaxError. You cannot add properties to a function this way.<br>C undefined<br>D ReferenceError</p><p><strong>答案：A</strong></p><p>这道题我并不知道答案，也是云里雾里，在console上实验一番才得知答案。</p><p>在<code>javascript</code>中，原始类型之外的所有东西都是对象。函数是一种特殊类型的对象。该函数是具有属性的对象，此属性是可调用的。</p><ul><li>下列代码输出什么<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Lydia Hallie&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name.padStart(<span class="number">13</span>))</span><br><span class="line"><span class="built_in">console</span>.log(name.padStart(<span class="number">2</span>))</span><br></pre></td></tr></table></figure></li></ul><p>A “Lydia Hallie”,”Lydia Hallie”<br>B “Lydia Hallie”,”Lydia Hallie”(“[13x whitespace]Lydia Hallie”,”[2x whitespace]Lydia Hallie”)<br>C “Lydia Hallie”,”Lydia Hallie”(“[1x whitespace]Lydia Hallie”,”Lydia Hallie”)<br>D “Lydia Hallie”,”Lyd”</p><p><strong>答案：C</strong></p><p>我错误地选择了D，我认为应该可以匹配到，但是我错的离谱，我对<code>padStart</code>并没有认真学习。</p><p><code>padStart</code>方法，可以在字符串的开头添加填充。传递给此方法的参数是字符串的总长度（包含填充）。字符串<code>Lydia Hallie</code>的长度为12，因此在字符串的开头只会插入1（13-12=1）个空格。如果传递的参数小于字符串的长度，则不会填充。</p><ul><li><code>JavaScript</code>全局执行上下文为你创建了两个东西，全局对象和<code>this</code>关键字</li></ul><p>A 对<br>B 错<br>C 视情况而定</p><p><strong>答案：A</strong></p><p>我就比较迷糊了，我知道this指向window，却不敢确定，于是傻傻地选了C</p><p>基本执行上下文是全局执行上下文：它是代码中随处可访问的内容。</p><ul><li>下列代码输出什么<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(age &lt; <span class="number">18</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> message = <span class="string">&#x27;Sorry, you&#x27;</span>re too young.<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    &#125;else&#123;</span></span><br><span class="line"><span class="string">        const message = &#x27;</span>Yay! You<span class="string">&#x27;re old enough&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(checkAge(<span class="number">21</span>))</span><br></pre></td></tr></table></figure></li></ul><p>A “Sorry,you’re too young”<br>B “Yay!You’re old enough!”<br>C ReferenceError<br>D undefined</p><p><strong>答案：C</strong></p><p>我错误选择了B，因为我没有考虑const没有变量提升</p><p><code>const</code>和<code>let</code>声明的变量是具有块级作用域的，块是大括号{}之间的任何东西。由于块级作用域，我们无法在声明的块之外引用变量，因此抛出<code>ReferenceError</code>。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;偶然的机会碰到了一个小程序&quot;&gt;&lt;a href=&quot;#偶然的机会碰到了一个小程序&quot; class=&quot;headerlink&quot; title=&quot;偶然的机会碰到了一个小程序&quot;&gt;&lt;/a&gt;偶然的机会碰到了一个小程序&lt;/h3&gt;&lt;p&gt;今天在网上的github浏览内容，突然碰到了一位大神的博客，地址见下面：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://muyiy.cn/blog/&quot;&gt;木易杨的博客&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="习题" scheme="https://faketerrible.github.io/categories/%E4%B9%A0%E9%A2%98/"/>
    
    
    <category term="习题" scheme="https://faketerrible.github.io/tags/%E4%B9%A0%E9%A2%98/"/>
    
    <category term="javascripy" scheme="https://faketerrible.github.io/tags/javascripy/"/>
    
  </entry>
  
  <entry>
    <title>设计模式笔记一</title>
    <link href="https://faketerrible.github.io/2021/05/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://faketerrible.github.io/2021/05/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%B8%80/</id>
    <published>2021-05-18T11:41:11.000Z</published>
    <updated>2021-05-23T04:00:43.459Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/pub/reader/119937492">设计模式（java）版</a></p><h3 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h3><p>   设计模式耳听已久，经常在一些讨论中谈及。为了不落于后，不得不啃电子书一本，记录本次笔记。</p><span id="more"></span><h5 id="开始前先说目标"><a href="#开始前先说目标" class="headerlink" title="开始前先说目标"></a>开始前先说目标</h5><ul><li><p>了解设计模式的概念</p></li><li><p>了解设计模式的历史</p></li><li><p>理解设计模式的要素</p></li><li><p>掌握设计模式的分类</p></li></ul><h5 id="1-1-设计模式的概念"><a href="#1-1-设计模式的概念" class="headerlink" title="1.1 设计模式的概念"></a>1.1 设计模式的概念</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设计模式（Design Pattern）是一套被反复使用、多数人知晓、经过分类编目的优秀代码设计经验的总结。使用设计模式是为了重用代码、使代码更易理解并保证代码的可靠性。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;框架通常定义了应用体系的整体结构类和对象的关系等设计参数，以便具体应用实现者能集中精力于应用本身的特定细节。框架主要记录软件应用中共同的设计决策，强调设计复用，因此成熟的框架设计中必然要使用设计模式，如果熟悉这些设计模式将有助于对框架结构的理解，从而能够迅速掌握框架的结构。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java 设计模式贯彻的原理是：面向接口编程，而不是面向实现。其目标原则是：降低耦合，增强灵活性。</p><h5 id="1-2-设计模式简史"><a href="#1-2-设计模式简史" class="headerlink" title="1.2 设计模式简史"></a>1.2 设计模式简史</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设计模式的研究起源于建筑工程设计大师 Christopher Alexander 的关于城市规划和建筑设计的著作。尽管他的著作是针对城市规划和建筑设计的，但是其观点实际上适用于所有工程设计领域，包括软件开发设计领域。Alexander 在其著作中指出，使用现在的设计方法所设计出的建筑物，不能满足所有工程设计的基本目的：改善人类的条件。Alexander 想要发明的建筑结构，是能使人类在舒适和生活质量上受惠的建筑结构。他得出的结论是，设计师必须不断努力，以创造出更加适合所有住户、用户和他们的社区的结构，从而满足他们的需要。同样软件开发中的设计模式也是不断进行研究、创新，以更加适合软件工程的各个方面。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设计模式在软件行业中的应用可以追溯到 1987 年。Ward Cunningham 和 Kent Beck 在一起用 Smalltalk 做设计用户界面的工作，他们决定使用 Alexander 的理论发展出一个有五个模式的语言来指导 Smalltalk 的新手，因此他们写了一篇「Using Pattern Languages for Object-Oriented Programs（使用模式语言做面向对象的程序）」的论文。此后不久，James O. Coplien 开始搜集 C++ 语言的成例（成例也可认为是一种设计模式，更偏重于编码技巧），这些 C++ 成例发表在 1991 年出版的《Advanced C++ Programming Styles and Idioms（高级 C++ 编程风格和成例）》一书中。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1990 年到 1992 年，Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四个人（常被称为 Gang of Four、GoF 或「四人帮」，如图 1-1 所示），开始了搜集模式的工作。1993 年 8 月，Kent Beck 和 Grady Booch 主持了在美国科罗拉多的山区度假村召开的第一次关于模式的会议，模式研究的主要人物都参加了这次会议，包括 James O. Coplien、Doug Lea、Desmond D’Souze、Norm Kerth、Wolfgang Pree 等。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1995 年 GoF 的「Design Patterns: Elements of Reusable Object-Oriented Software」（《设计模式：可复用面向对象软件的基础》）出版。该书第一次将设计模式提升到理论高度，并将之规范化，同时提出了 23 种基本设计模式。此书发表之后，带动了设计模式的研究热潮，被确定为模式结构的数目也呈爆炸性增长。时至今日，在可复用面向对象软件的发展过程中，新的设计模式仍然不断出现。</p><h5 id="1-3-设计模式要素"><a href="#1-3-设计模式要素" class="headerlink" title="1.3 设计模式要素"></a>1.3 设计模式要素</h5><p><strong>设计模式应当包含以下几个要素</strong></p><ul><li>模式名称（pattern name）</li></ul><p>设计模式的名称简洁地描述了设计模式的问题、解决方案和效果。一个模式必须有一个有意义的、简短而准确的名字。好的模式名称便于设计人员之间交流思想，进行抽象讨论及研究设计结果。</p><ul><li>问题（problem）</li></ul><p>描述了应该在何时使用模式。它解释了设计问题和问题存在的前因后果，它可能描述了特定的设计问题，如怎样用对象表示算法等，也可能描述了导致不灵活设计的类或对象结构。</p><ul><li>环境或初始环境（context 或 initial context）</li></ul><p>解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象组合）来解决这个问题。</p><ul><li>效果（consequences）</li></ul><p>描述了模式应用的效果及使用模式应权衡的问题。效果用来描述设计模式的利弊，它往往是衡量模式是否可用的重要因素，对于评价设计选择和理解使用模式的代价及好处具有重要意义。</p><ul><li>举例（examples）</li></ul><p>从熟知系统里取出来的、有视觉效果的，或以比喻方式表达的例子，更易于使用者理解。</p><ul><li>末态环境（resulting context）</li></ul><p>末态环境包括模式带来的好结果和坏结果，以及新状态中含有的其他问题和可能涉及的其他有关系的模式。末态环境是模式的末态条件和可能有的副作用。</p><ul><li>推理（rationale）</li></ul><p>推理解释本模式的步骤、规则，以及此模式作为一个整体是如何以特定的方式解决模式的。推理让使用者知道模式是如何工作的，为什么可以工作，以及使用此模式的优点是什么。</p><ul><li>其他有关模式（related pattern）</li></ul><p>描述在现有的系统中此模式与其他模式的静态和动态的关系。相关模式的初始环境和末态环境经常是相容的，这些模式有可能是本模式的前任模式，即应用了这些模式可以给出本模式的初始环境，也有可能是本模式的继任模式，即本模式的应用给出这些模式的初始环境。</p><ul><li>已知的应用（known uses）</li></ul><p>已知的应用是在已有的系统模式中出现和应用的例子，有助于证明此模式确实是对一个重复发生的问题可行的解答。</p><h5 id="1-4-设计模式分类"><a href="#1-4-设计模式分类" class="headerlink" title="1.4 设计模式分类"></a>1.4 设计模式分类</h5><ul><li>创建型</li></ul><p><strong>所有的创建型模式都有两个主要功能：</strong></p><p>■ 将系统所使用的具体类的信息封装起来；</p><p>■ 隐藏类的实例是如何被创建和组织的。外界对于这些对象只知道它们共同的接口，而不清楚其具体的实现细节。</p><p><strong>常见的创建型设计模式有下列几种。</strong></p><p>■ 单例模式（Singleton Pattern）：一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p>■ 工厂方法模式（Factory Pattern）：在工厂方法模式中，工厂类成为了抽象类，实际的创建工作将由其具体子类来完成。工厂方法的用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中去，强调的是「单个对象」的变化。</p><p>■ 抽象工厂模式（Abstract Factory）：抽象工厂是所有工厂模式中最为抽象和最具有一般性的一种形态。抽象工厂可以向客户提供一个接口，使得客户可以在不必指定产品具体类型的情况下，创建多个产品族中的产品对象，强调的是「系列对象」的变化。</p><p>■ 建造者模式（Builder Pattern）：把构造对象实例的逻辑移到了类的外部，在类的外部定义了该类的构造逻辑。它把一个复杂对象的构造过程从对象的表示中分离出来，其直接效果是将一个复杂的对象简化为一个比较简单的目标对象，强调的是产品的构造过程。</p><p>■ 原型模式（Prototype Pattern）：原型模式和工厂模式一样，同样对客户隐藏了对象创建工作，但与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过复制一个现有对象生成新对象。</p><ul><li>结构型</li></ul><p><strong>常见的结构型设计模式有以下几种。</strong></p><p>■ 代理模式（Proxy）：为其他对象提供一种代理以控制对该对象的访问。</p><p>■ 装饰模式（Decorator）：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</p><p>■ 适配器模式（Adapter）：将一个类的接口变换成客户端所期待的另一接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p><p>■ 组合模式（Composite）：也叫合成模式，将对象组合成树形结构以表示「部分—整体」的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p><p>■ 桥梁模式（Bridge）：也叫桥接模式，将抽象和实现解耦，使得两者可以独立变化。</p><p>■ 外观模式（Facade）：也叫门面模式，要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行，外观模式提供一个高层次的接口，使得子系统更易于使用。</p><p>■ 享元模式（Flyweight）：是池技术的重要实现方式，使用共享对象可有效地支持大量的细粒度的对象。</p><ul><li>行为型</li></ul><p><strong>常见的行为型设计模式有以下几种。</strong></p><p>■ 模板方法模式（Template Method）：定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>■ 命令模式（Command）：是一种高内聚的模式，将一个请求封装成一个对象，从而使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。</p><p>■ 责任链模式（Chain of Responsibility）：使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p><p>■ 策略模式（Strategy）：也叫政策模式，定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。</p><p>■ 迭代器模式（Iterator）：提供一种方法访问一个容器对象中的各个元素，而又不需要暴露该对象的内部细节。</p><p>■ 中介者模式（Mediator）：用一个中介对象封装一系列的对象交互，中介者使各对象不需要显式地相互作用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p>■ 观察者模式（Observer）：也叫发布订阅模式，定义对象间的一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p><p>■ 备忘录模式（Memento）：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p><p>■ 访问者模式（Visitor）：封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</p><p>■ 状态模式（State）：当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类型，状态模式的核心是封装，状态的变更引起行为的变更。</p><p>■ 解释器模式（Interpreter）：给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该文法表示来解释语言中的句子。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/pub/reader/119937492&quot;&gt;设计模式（java）版&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;设计模式概述&quot;&gt;&lt;a href=&quot;#设计模式概述&quot; class=&quot;headerlink&quot; title=&quot;设计模式概述&quot;&gt;&lt;/a&gt;设计模式概述&lt;/h3&gt;&lt;p&gt;   设计模式耳听已久，经常在一些讨论中谈及。为了不落于后，不得不啃电子书一本，记录本次笔记。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://faketerrible.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://faketerrible.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="java" scheme="https://faketerrible.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>前端学习</title>
    <link href="https://faketerrible.github.io/2021/05/18/javascript-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://faketerrible.github.io/2021/05/18/javascript-%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-18T08:57:00.000Z</published>
    <updated>2021-05-23T06:21:43.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端学习地址"><a href="#前端学习地址" class="headerlink" title="前端学习地址"></a>前端学习地址</h3><p><a href="https://es6.ruanyifeng.com/">ES6入门教程</a></p><p><a href="https://zh-hans.reactjs.org/">react</a></p><p><a href="https://v3.cn.vuejs.org/">vue</a></p><p><a href="http://nodejs.cn/learn">Node</a></p><p>看一遍或者学一遍，基本可以入门，掌握前端的基本操作和框架。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前端学习地址&quot;&gt;&lt;a href=&quot;#前端学习地址&quot; class=&quot;headerlink&quot; title=&quot;前端学习地址&quot;&gt;&lt;/a&gt;前端学习地址&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://es6.ruanyifeng.com/&quot;&gt;ES6入门教程&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://faketerrible.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://faketerrible.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://faketerrible.github.io/2021/05/18/hello-world/"/>
    <id>https://faketerrible.github.io/2021/05/18/hello-world/</id>
    <published>2021-05-18T08:22:20.610Z</published>
    <updated>2021-05-18T08:22:20.610Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
